<h1>1. 변수<h1>

intro
프로그래밍은 데이터 처리를 하는 것
변수 사용은 데이터를 편리하게 저장하고 꺼내 쓰는 것
변수의 선언과 값의 할당에 대해 설명하고 코드로 작성
값으로 변환된 표현문이 변수에 할당되어 담기는 과정을 설명

변수란?
데이터를 위한 보관함 = 메모리
메모리의 크기는 동일
각 메모리의 이름 = 변수(데이터의 이름표)
변수를 통해 데이터 사용 (재활용)

변수를 사용하는 방법
메모리를 확보해야함
선언 (declaration)
let age;

보관함에 데이터 저장
할당 (assignment)
age = 12;
= 는 같다가 아닌 데이터를 저장한다는 의미

선언과 할당 동시에 가능
let name = 'kim'

기초, 실습
자바스크립트에서 변수의 선언과 값의 할당에 대해서 설명
변수 선언과 값 할당에 사용되는 용어에 대해 정확하게 앎
=가 "같다"라는 의미가 아니라 할당 연산자임을 이해
num=num+1 이 "같다"라는 의미가 아니라 값을 할당하는 것임

변수명
공백 X
중간 중간 단어의 첫글자 대문자(ex. areaOFCircle)
낙타 등모양 처럼 생겨 Camel Case라고 부름

한번 선언한 변수 다시 사용할 때 let 안씀
예시

let sum = 1;
sum = sum + 2; // 같다 라는 의미가 아니라 sum 에 sum + 2 를 넣는 것
sum = sum + 3;
sum = sum + 4;
할당이 없는 변수?
선언은 let myname;

할당이 X = undefined

자체로 값
정의 되지 않았을 뿐

2. 타입
자바스크립트에서 원시 자료형과 참조 자료형이 무엇인지 앎
원시 자료형 string,number,boolean,undefined 의 의미를 이해
typeof를 활용하여 특정 값이 타입을 확인
비교시 엄밀한 비교(===과 !==의 필요성을 이해

string 문자열 ex. myname = Steve 따옴표 O
number 숫자 ex. pi = 3.1415 따옴표 X
boolean 참/거짓(true/false) ex. isAdult = v성인입니까? 따옴표 X

위 타입이 섞인 타입도 존재 (자료형) compound

배열

bananan
apple
pineapple
let fruits + [
 'banana',
 'apple',
 'pineapple'
];
객체

이름 Steve
나이 32
v 학생입니까?

let person = {
 name: 'Steve',
 age: 32,
 isStudent: true
};
undefinen (할당 되지 않음, 값이 없음)
함수 또한 타입

3. 함수
intro
함수가 "작은 기능의 단위"라는 것을 이해할 수 있음
함수 선언을 위해 필요한 keyword,name,parameter,body에 대해 이해
함수 선언과 호출의 기초적인 작동 원리를 이해
함수가 선언되어 함수 표현식이 변수에 담기는 과정을 설명
결과값이 변수에 할당되어 담기는 과정을 설명

함수(Function) 이해
함수란 코드의 묶음 (즐겨찾기 버튼)
그러므로 기능(function)의 단위
구체적인 입력과 출력간을 가질 수 있음
호출 후 반드시 돌아옴

사용법
1. 버튼 제작 선언(declaration)
함수는 특별한 공간에 보관됨

2. 버튼 사용 호출(call, invocation)
cal(10, 20);

기초,실습
함수의 호출과 리턴에 대해 이해하고,실제 코드로 작성
함수 그 자체(func)와,함수의 호출(func())를 구분
매개변수(parameter)와 전달인자(argument)를 구분하여 사용
같은 기능을 하는 함수를 선언식,표현식,화살표 함수로 바꾸어 표현

함수란?
어떤 목적을 가진 작업들을 수행하는 코드들이 모인 블록

함수에는 입력값을 설정할 수 있고 출력값을 반환됨.

출력값
함수가 실행 되다가 리턴을 만나면 리턴문에 있는 값이 반환 동시에 함수 종료

리턴문을 만나지 않았으면 undefined 됨

입력값과 출력값
함수 선언식
function getTriangleArea(base, height) {
 let triangleArea = (base * height) / 2;
 return triangleArea
 }
 console.log(getTriangleArea(2,4)) // Print 4
base, height 가 입력값
return 값(triangleArea)이 출력됨

function getTriangleArea(base, height) {
 let triangleArea = (base * height) / 2;
 }
 console.log(getTriangleArea(2,4)) // Print 4
함수 내부에서 return 하지 않음
출력값 undefined

함수는 지시사항들의 묶음
ex.

function getSomeCoffee() {
 // 1. 물을 끓암
 // 2. 원두를 간다.
 // 3. 드리퍼에 필터를 설치
 // 4. 드립커피 추출
 // 5. 만들어진 커피 제공(return)
}
함수 선언 방법
함수 선언식(function statement)
function getTriangleArea(base, height) {
 let triangleArea = (base * height) / 2;
 return triangleArea
 }
변수에 익명 함수를 할당하는 방식으로 작성
함수 선언 방식은 함수 리터럴 형식과 같음
반드시 함수 이름이 명시되야 함
함수 이름으로 함수 호출
함수 표현식(function expressions)
const getTriangleArea = function(base, height) {
 let triangleArea = (base * height) / 2;
 return triangleArea
 }
함수 리터럴로 생성한 함수를 변수에 할당하는 방법. 함수의 참조값이 getTriangleArea라는 변수로 저장
getTriangleAre는 함수 이름이 아님. function은 익명 함수 이며 함수가 할당된 변수인 getTriangleAre를 통해 호출할 수 있음
표현식에서 함수에 이름이 지정되었다고 해도 변수 이름을 사용하여 함수를 호출하여야함. 함수에 이름을 정하면 코드디버깅에 도움이 된다,
함수 이름을 지정했더라도 호출방식에 영향을 미치지 않음(호이스팅 되지 않음)
차이점
호이스팅(hoisting)
끌어올림. 자바스크립트 엔진에 script 태그를 만나면 자바스크립트 파일을 먼저 읽으며 선언된 변수,함수를 메모리에 저정. 과정이 끝나면 위에서 부터 차례대로 실행됨
함수나 변수를 코드의 하단부에 선언했다고 해도 코드의 상단부에서 함수를 호출(실행)살 수 있는 자바스크립트 만의 특징

함수 선언시 차이점
함수 선언식에서는 세미콜론 미사용
함수 표현식에서는 세미콜론 사용
화살표 함수
const getTriangleArea = (base, height) => {
 let triangleArea = base * height;
 return triangleArea
 }
화살표 함수는 함수표현식의 단축표현
function 키워드를 => 로 축약해서 사용
그러나 완전히 같지 않음으로 주의

홤수 표현식과 화살표 함수의 차이
함수 표현식

const squere = function(X) { return X*X };
화살표 함수

const squere + (x) => { return X*X }
화살표 함수는
arguments 변수가 정의 되어 있지 않으므로 사용불가
생성자로 사용 불가
yield 키워드 사용불가 제너레이터로 사용할수 없음
3가지 방법 차이점 (https://velog.io/@bigbrothershin/%EC%98%A4%EB%8A%98-%EA%B3%B5%EB%B6%80%ED%95%A0-%EA%B2%832020.1.30)

if 함수의 본문(body)에 return 문만 있으면
return과 {}중괄호(curly bracket)를 생략할 수 있음

const getTriangleArea = (base, height) => base * height / 2; // 0, 정상작동
const getTriangleArea = (base, height) => { base * height } / 2; // X ,undefined 리턴
소괄호() 사용은 가능

const getTriangleArea = (base, height) => (base * height / 2) // 0, 정상작동
함수 내의 표현식이 2줄 이상인 경우 return과 중괄호를 쓰는 것이 좋음
//bad
const getStudentAvg = arr =>arr.filter(person => person.job === 'student').reduce((sum,person) => (sum + person.grade), 0)

//good
const getStudentAvg = aff => {
 return arr
 .filter(person => person.job === 'student')
 .reduce((sum, person) => (sum + person.grade), 0)
}
두번째가 가동성이 더 좋음

함수의 호출
선언
fuction getTriangleArea(base, height) {
 let triangleArea = (base * height) /2;
}
(base, height) 이 매개 변수(parameter)
함수를 실행할 때 바뀔수 있지만 let 등의 키워드를 쓰지 않고 사용 가능

호출
getTriangleArea(3,4)
(3,4) 가 전달 인자(argument)
함수를 호출할 때 let의 변수에 할당 되는 값

연습문제
사각형의 넓이를 구하는 함수를 선언식으로 작성
함수 표현식/ 화살표 함수로 바꾸어 보세요.
나의 답
//사각형의 가로와 높이를 안다.
//사각형의 가로와 높이를 곱한다.
//답을 적어낸다.

//함수 선언식
function getRectangleArea(width, height){
    let getRectangleArea = (width * height);
    return RectangleArea
}
console.log(getRectangleArea(3,4))

//함수 표현식
const getRectangleArea = function(width, height) {
    let RectangleArea = (width * height);
    return RectangleArea
}


//화살표함수
const getRectangleArea = (width, height) => {
    let RectangleArea = width * height;
    return RectangleArea
}
답
//함수 선언식

function getRectangleArea(width, height){
    let RectangleArea = (width * height);
    return RectangleArea
}
getRectangleArea(3,4)

//함수 표현식
let getRectangleArea = function(width, height) {
    let RectangleArea = width * height;
    return RectangleArea
}
getRectangleArea(3,4)

// 화살표 함수
let getRectangleArea = (width, height) => {
    let rectangleArea = width * height;
    return rectangleArea
}
getRectangleArea(3,4)

//return, 중괄호 생략
let getRectangleArea = (width, hight) => width * hight;
getRectangleArea(3,4)
?
var vs const vs let 차이 찾아보기
var는 변수를 한 번 더 선언했음에도 에러가 나오지 않고 값이 출력 된다.
코드량이 많아지면 복잡해지고 값이 바뀔 우려가 있음

그러므로 ES6에 나온 것이 let 과 const 이다.

둘의 차이점은 변수의 재할당의 여부

let은 재할당이 가능하고 const는 불가능하다.

즉,

 재선언 배할당
var o o
let x o
const x x

인 셈이다.

재할당이 필요한 경우에 한정해 let을 사용한다. 이때 변수의 스코프는 최대한 좁게
재할당이 필요 없는 상수와 객체에는 const를 사용한다.

참조

* 코드 학습법
!!구글링!!
mdn + 키워드로 검색하기
mdn 문서가 가장 정확한 레퍼런스(Mozilla)

mdn 문서가 어려워요!!
자연어 문장으로 검색
단, 영어로 javascript 키워드 함께
ex.how to 궁금한 것 in javascript

에러 발생시 에러 자체를 검색
* 크롬 개발자 도구 사용법
문제 풀기 (변수와 자료형)
임의의 값을 수로 리턴하기
return Number(anything)

임의의 값을 문자로 리턴하기
return String(anything)

* 함수 대문자, 소문자 구분 잘 하기
* 글자 하나라도 틀리면 에러나니 주의 (꼼꼼하게 보기)
4. 조건문 MDN
기초,퀴즈,실습
truthy 와 falsy가 조건문에서 작동하는 방식을 이해
비교연산자를 통한 엄격한 비교(===,!==)에 대해 이해
if와 else if,else를 이해하고 무리없이 활용
논리연산자를(&&,ll,!,...)을 통해 복잡한 조건을 간결하게 작성

조건문이란 ?
어떠한 조건을 판별하는 기준을 만드는 것

조건문에는 반드시 비교 연산자(comparison operator)가 필요함

비교연산자란 ?
, <, ===

'> 초과'
'< 미만'
'>= 이상'
'<= 이하'
'=== 같다'
'!== 다르다'

1===1
true

1==='1'
true

100==='100'
false

1 == '1'
true

null == underfined
true

== 는 타입을 업격하게 비교하지 못함

조건문 쓰는 법
if(조건1) {
 //조건 1이 통과할 경우
 } else if (조건2 {
 //조건 1이 통과하지 않고
 //조건2가 통과할 경우
 } else {
 //모든 조건이 통과하지 않는 경우
 }
조건에는 Boolean으로 결과가 나오는 비교구문이 들어간다.
두가지 조건이 한번에 적용되는 경우?
논리 연산자(Logical Operator)를 사용

ex.
학생이면서, 여성일 때 통과 (and 연산자)
isStudent && isFemale;

학생이거나, 여성일 때 통과 (or 연산자)
isStudent || isFemale;

학생이 아니면서, 여성일 때 통과 (NOT 연산자)
!isStudent && isFemale;
truthy,falsy 여부를 반전시킴

!false // true
!(3>2) // false
논리 연산자 OR
true || true // true
true || false // true
false || false // false
논리 연산자 AND
true && true // true
true && false // false
false && false // false
-논리 연산자 NOT
!false // true
!(3>2) // false
!undefined // true
!'Hello' // false
undefined 는 값이 없으므로 false로 취급됨 (falsy한 값이다.)
문자열은 빈 문자열이 아닌이상 true로 취급 (truthy한 값이다.

기억해야 할 6가지 falsy값
if (false)
if (null)
if (undefined)
if (0)
if (NaN) // Not a Number
if ('')
조건문 문제로 에러 메세지 알아보기
코플릿 에러 메세지 읽는 법 배우기, 이를 통해 작성한 코드 수정방법

1. 요구사항을 읽어라
2. 테스트 케이스를 확인하라
3. 테스트가 통과하지 않은 이유를 확인하라
디버그
문제가 되는 부분을 추적하는 과정

디버깅
디버그를 실시하는 행위

조건문 문제로 배우는 알고리즘
문제 체계적으로 해결하는 방법 알기
복잡한 조건문을 활용하여,실생활에서 쉽게 마주하는 문제를 해결하기 위한 알고리즘 구현

문제
문제 분해
수도코드(pseudocode) 작성
코드 옮기기
